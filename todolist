#!/usr/bin/env python3
import sys
import argparse
import functools


class TodoList:

    def __init__(self):
        self.num_of_args = len(sys.argv) - 1
        self.command_map = {"add": [f"add_task", "add - Adds a task to the list."],
                            "cleanup": [f"cleanup_done_tasks", "cleanup - cleans done tasks."],
                            "done": [f"change_task_status", "done - Marks task as done."],
                            "help": [f"help_about_command", "help - Helps about any command."],
                            "list": [f"list_to_do_tasks", "list - Lists all tasks still to do."],
                            "undone": [f"change_task_status", "undone - Marks task as undone."]}

        parser = argparse.ArgumentParser(prog="todolist", description="An application for managing a to-do task list.")
        parser.add_argument("command", choices=self.command_map.keys(), help="Choose a function", type=str)
        if self.num_of_args > 1:
            parser.add_argument("command_argument", type=str)
            args = parser.parse_args(sys.argv[1:])
            self.command = args.command
            self.command_arg = args.command_argument
        else:
            args = parser.parse_args(sys.argv[1:])
            self.command = args.command
            self.command_arg = None

    @staticmethod
    def read_file_lines():
        try:
            with open('todolist_file.txt', 'a+') as file:
                file.seek(0)
                lines = file.readlines()
        except IOError:
            return -1
        return lines

    @staticmethod
    def write_to_file(writing_lines, data, mode):
        try:
            with open('todolist_file.txt', mode) as file:
                if writing_lines:
                    file.writelines(data)
                else:
                    file.write(data)
        except IOError:
            print("IO error: Unsuccessful writing to file.")
            return -1
        return 1

    def add_task(self):
        """
        Adds a task to the list. A repeated name is not acceptable.
        :return: 1 if successful, -1 otherwise.
        """
        if self.command_arg is None:
            print("Missing argument: Task Name.")
            return -1
        max_index = 0
        lines = self.read_file_lines()
        if lines is -1:
            print("IO error: Unsuccessful reading from file.")
            return -1

        #  finding the maximal index
        for line in lines:
            split_line = line.split(",")
            line_task_name = ",".join(split_line[2:])  # finding the name of the already existing task, handling commas
            if line_task_name.rstrip("\n") == self.command_arg:
                print("There is already a task with this name.")
                return -1
            max_index = max(max_index, int(split_line[0]))

        #  creating the new line to add to the file
        if max_index is 0:
            new_line = f"{max_index + 1},u,{self.command_arg}"
        else:
            new_line = f"\n{max_index + 1},u,{self.command_arg}"
        return self.write_to_file(False, new_line, "a+")

    def cleanup_done_tasks(self):
        """
        Removes from the file all the tasks that are already done.
        :return:  1 if successful, -1 otherwise.
        """
        if self.command_arg is not None:
            print(f"Unrecognized argument: {self.command_arg}")
            return -1
        lines = self.read_file_lines()
        if lines is -1:
            print("IO error: Unsuccessful reading from file.")
            return -1
        new_file_lines = [line for line in lines if line.split(",")[1] is "u"]  # keeping only undone tasks
        if len(new_file_lines) > 0:
            new_file_lines[-1] = new_file_lines[-1].rstrip("\n")
        return self.write_to_file(True, new_file_lines, "w")

    def change_task_status(self):
        """
        Changes the status of a task from done to undone and vice versa.
        :return: 1 if successful, -1 otherwise.
        """
        if self.command_arg is None:
            print("Missing argument: Task id.")
            return -1
        if not self.command_arg.isdigit():
            print("Wrong argument: Argument should be a positive integer.")
            return -1
        lines = self.read_file_lines()
        if lines is -1:
            print("IO error: Unsuccessful reading from file.")
            return -1
        for i in range(len(lines)):
            split_line = lines[i].split(",")
            if split_line[0] == self.command_arg:  # task id matches input
                split_line[1] = self.command[0]  # assigning 'd' or 'u'
                lines[i] = ",".join(split_line)
                break
        else:
            print(f"No task with id {self.command_arg} was found")
            return -1
        return self.write_to_file(True, lines, "w")

    def list_to_do_tasks(self):
        """
        Prints all the task with 'undone' status.
        :return: 1 if successful, -1 otherwise.
        """
        if self.command_arg is not None:
            print(f"Unrecognized argument: {self.command_arg}")
            return -1
        lines = self.read_file_lines()
        if lines is -1:
            print("IO error: Unsuccessful reading from file.")
            return -1

        #  creating text
        split_lines = [line.split(",") for line in lines]
        if len(split_lines) is 0:
            return 1
        print_format = [f"{split_line[0]}: {','.join(split_line[2:])}"
                        for split_line in split_lines if split_line[1] is "u"]
        text = functools.reduce((lambda all_lines, next_line: all_lines + next_line), print_format)
        print(text)
        return 1

    def help_about_command(self):
        if self.command_arg is None:
            print("Missing argument: Command Name.")
            return -1
        elif self.command_arg in self.command_map.keys():
            print(self.command_map[self.command_arg][1])
            return 1
        else:
            print(f"Unrecognized argument: todolist has no '{self.command_arg}' command")
            return -1


if __name__ == '__main__':
    list_manager = TodoList()
    result = getattr(list_manager, list_manager.command_map[list_manager.command][0])()
    if result is -1:
        sys.exit(-1)
